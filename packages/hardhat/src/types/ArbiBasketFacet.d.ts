/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ArbiBasketFacetInterface extends ethers.utils.Interface {
  functions: {
    "HUNDRED_PERCENT()": FunctionFragment;
    "MAX_ANNUAL_FEE()": FunctionFragment;
    "MAX_ENTRY_FEE()": FunctionFragment;
    "MAX_EXIT_FEE()": FunctionFragment;
    "MAX_TOKENS()": FunctionFragment;
    "MIN_AMOUNT()": FunctionFragment;
    "addToken(address)": FunctionFragment;
    "balance(address)": FunctionFragment;
    "calcOutStandingAnnualizedFee()": FunctionFragment;
    "calcTokensForAmount(uint256)": FunctionFragment;
    "calcTokensForAmountExit(uint256)": FunctionFragment;
    "chargeOutstandingAnnualizedFee()": FunctionFragment;
    "exitPool(uint256)": FunctionFragment;
    "getAnnualizedFee()": FunctionFragment;
    "getCap()": FunctionFragment;
    "getEntryFee()": FunctionFragment;
    "getEntryFeeBeneficiaryShare()": FunctionFragment;
    "getExitFee()": FunctionFragment;
    "getExitFeeBeneficiaryShare()": FunctionFragment;
    "getFeeBeneficiary()": FunctionFragment;
    "getLock()": FunctionFragment;
    "getLockBlock()": FunctionFragment;
    "getTokenInPool(address)": FunctionFragment;
    "getTokens()": FunctionFragment;
    "joinPool(uint256)": FunctionFragment;
    "removeToken(address)": FunctionFragment;
    "setAnnualizedFee(uint256)": FunctionFragment;
    "setCap(uint256)": FunctionFragment;
    "setEntryFee(uint256)": FunctionFragment;
    "setEntryFeeBeneficiaryShare(uint256)": FunctionFragment;
    "setExitFee(uint256)": FunctionFragment;
    "setExitFeeBeneficiaryShare(uint256)": FunctionFragment;
    "setFeeBeneficiary(address)": FunctionFragment;
    "setLock(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "HUNDRED_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ANNUAL_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ENTRY_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_EXIT_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addToken", values: [string]): string;
  encodeFunctionData(functionFragment: "balance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calcOutStandingAnnualizedFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokensForAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokensForAmountExit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chargeOutstandingAnnualizedFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exitPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAnnualizedFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEntryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntryFeeBeneficiaryShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExitFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExitFeeBeneficiaryShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getLock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLockBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInPool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "removeToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAnnualizedFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEntryFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEntryFeeBeneficiaryShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExitFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExitFeeBeneficiaryShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLock",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "HUNDRED_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ANNUAL_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ENTRY_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_EXIT_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_TOKENS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_AMOUNT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcOutStandingAnnualizedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokensForAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokensForAmountExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chargeOutstandingAnnualizedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAnnualizedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEntryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntryFeeBeneficiaryShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getExitFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExitFeeBeneficiaryShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLockBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAnnualizedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEntryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEntryFeeBeneficiaryShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setExitFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExitFeeBeneficiaryShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLock", data: BytesLike): Result;

  events: {
    "AnnualizedFeeSet(uint256)": EventFragment;
    "CapSet(uint256)": EventFragment;
    "EntryFeeBeneficiaryShareSet(uint256)": EventFragment;
    "EntryFeeSet(uint256)": EventFragment;
    "ExitFeeBeneficiaryShareSet(uint256)": EventFragment;
    "ExitFeeSet(uint256)": EventFragment;
    "FeeBeneficiarySet(address)": EventFragment;
    "FeeCharged(uint256)": EventFragment;
    "LockSet(uint256)": EventFragment;
    "PoolExited(address,uint256)": EventFragment;
    "PoolJoined(address,uint256)": EventFragment;
    "TokenAdded(address)": EventFragment;
    "TokenRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnnualizedFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CapSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EntryFeeBeneficiaryShareSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntryFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitFeeBeneficiaryShareSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeBeneficiarySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeCharged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolExited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolJoined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRemoved"): EventFragment;
}

export class ArbiBasketFacet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: ArbiBasketFacetInterface;

  functions: {
    HUNDRED_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "HUNDRED_PERCENT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_ANNUAL_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_ANNUAL_FEE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_ENTRY_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_ENTRY_FEE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_EXIT_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_EXIT_FEE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_TOKENS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_TOKENS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MIN_AMOUNT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToken(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balance(_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balance(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcOutStandingAnnualizedFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcOutStandingAnnualizedFee()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcTokensForAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "calcTokensForAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    calcTokensForAmountExit(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "calcTokensForAmountExit(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    chargeOutstandingAnnualizedFee(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "chargeOutstandingAnnualizedFee()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitPool(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exitPool(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAnnualizedFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getAnnualizedFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCap()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEntryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getEntryFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEntryFeeBeneficiaryShare(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getEntryFeeBeneficiaryShare()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExitFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getExitFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getExitFeeBeneficiaryShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getExitFeeBeneficiaryShare()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFeeBeneficiary(overrides?: CallOverrides): Promise<[string]>;

    "getFeeBeneficiary()"(overrides?: CallOverrides): Promise<[string]>;

    getLock(overrides?: CallOverrides): Promise<[boolean]>;

    "getLock()"(overrides?: CallOverrides): Promise<[boolean]>;

    getLockBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getLockBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenInPool(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "getTokenInPool(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getTokens(overrides?: CallOverrides): Promise<[string[]]>;

    "getTokens()"(overrides?: CallOverrides): Promise<[string[]]>;

    joinPool(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "joinPool(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeToken(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAnnualizedFee(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAnnualizedFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCap(
      _maxCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCap(uint256)"(
      _maxCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEntryFee(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEntryFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEntryFeeBeneficiaryShare(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEntryFeeBeneficiaryShare(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setExitFee(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setExitFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setExitFeeBeneficiaryShare(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setExitFeeBeneficiaryShare(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeBeneficiary(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeBeneficiary(address)"(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLock(
      _lock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLock(uint256)"(
      _lock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  "HUNDRED_PERCENT()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_ANNUAL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_ANNUAL_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_ENTRY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_ENTRY_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_EXIT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_EXIT_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_TOKENS()"(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  "MIN_AMOUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

  addToken(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

  "addToken(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balance(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balance(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcOutStandingAnnualizedFee(overrides?: CallOverrides): Promise<BigNumber>;

  "calcOutStandingAnnualizedFee()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcTokensForAmount(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  "calcTokensForAmount(uint256)"(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  calcTokensForAmountExit(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  "calcTokensForAmountExit(uint256)"(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
  >;

  chargeOutstandingAnnualizedFee(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "chargeOutstandingAnnualizedFee()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitPool(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exitPool(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAnnualizedFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getAnnualizedFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCap(overrides?: CallOverrides): Promise<BigNumber>;

  "getCap()"(overrides?: CallOverrides): Promise<BigNumber>;

  getEntryFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getEntryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getEntryFeeBeneficiaryShare(overrides?: CallOverrides): Promise<BigNumber>;

  "getEntryFeeBeneficiaryShare()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExitFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getExitFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getExitFeeBeneficiaryShare(overrides?: CallOverrides): Promise<BigNumber>;

  "getExitFeeBeneficiaryShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  getFeeBeneficiary(overrides?: CallOverrides): Promise<string>;

  "getFeeBeneficiary()"(overrides?: CallOverrides): Promise<string>;

  getLock(overrides?: CallOverrides): Promise<boolean>;

  "getLock()"(overrides?: CallOverrides): Promise<boolean>;

  getLockBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "getLockBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenInPool(_token: string, overrides?: CallOverrides): Promise<boolean>;

  "getTokenInPool(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getTokens(overrides?: CallOverrides): Promise<string[]>;

  "getTokens()"(overrides?: CallOverrides): Promise<string[]>;

  joinPool(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "joinPool(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeToken(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeToken(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAnnualizedFee(
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAnnualizedFee(uint256)"(
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCap(
    _maxCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCap(uint256)"(
    _maxCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEntryFee(
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEntryFee(uint256)"(
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEntryFeeBeneficiaryShare(
    _share: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEntryFeeBeneficiaryShare(uint256)"(
    _share: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setExitFee(
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setExitFee(uint256)"(
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setExitFeeBeneficiaryShare(
    _share: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setExitFeeBeneficiaryShare(uint256)"(
    _share: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeBeneficiary(
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeBeneficiary(address)"(
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLock(
    _lock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLock(uint256)"(
    _lock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    "HUNDRED_PERCENT()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ANNUAL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_ANNUAL_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ENTRY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_ENTRY_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_EXIT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_EXIT_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_TOKENS()"(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_AMOUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addToken(_token: string, overrides?: CallOverrides): Promise<void>;

    "addToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balance(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balance(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOutStandingAnnualizedFee(overrides?: CallOverrides): Promise<BigNumber>;

    "calcOutStandingAnnualizedFee()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokensForAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "calcTokensForAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    calcTokensForAmountExit(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    "calcTokensForAmountExit(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }
    >;

    chargeOutstandingAnnualizedFee(overrides?: CallOverrides): Promise<void>;

    "chargeOutstandingAnnualizedFee()"(
      overrides?: CallOverrides
    ): Promise<void>;

    exitPool(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "exitPool(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAnnualizedFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getAnnualizedFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCap(overrides?: CallOverrides): Promise<BigNumber>;

    "getCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEntryFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getEntryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEntryFeeBeneficiaryShare(overrides?: CallOverrides): Promise<BigNumber>;

    "getEntryFeeBeneficiaryShare()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExitFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getExitFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getExitFeeBeneficiaryShare(overrides?: CallOverrides): Promise<BigNumber>;

    "getExitFeeBeneficiaryShare()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeBeneficiary(overrides?: CallOverrides): Promise<string>;

    "getFeeBeneficiary()"(overrides?: CallOverrides): Promise<string>;

    getLock(overrides?: CallOverrides): Promise<boolean>;

    "getLock()"(overrides?: CallOverrides): Promise<boolean>;

    getLockBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getLockBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenInPool(_token: string, overrides?: CallOverrides): Promise<boolean>;

    "getTokenInPool(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTokens(overrides?: CallOverrides): Promise<string[]>;

    "getTokens()"(overrides?: CallOverrides): Promise<string[]>;

    joinPool(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "joinPool(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeToken(_token: string, overrides?: CallOverrides): Promise<void>;

    "removeToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAnnualizedFee(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAnnualizedFee(uint256)"(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCap(_maxCap: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setCap(uint256)"(
      _maxCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEntryFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setEntryFee(uint256)"(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEntryFeeBeneficiaryShare(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEntryFeeBeneficiaryShare(uint256)"(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExitFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setExitFee(uint256)"(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExitFeeBeneficiaryShare(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExitFeeBeneficiaryShare(uint256)"(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeBeneficiary(address)"(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLock(_lock: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setLock(uint256)"(
      _lock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AnnualizedFeeSet(
      fee: null
    ): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    CapSet(cap: null): TypedEventFilter<[BigNumber], { cap: BigNumber }>;

    EntryFeeBeneficiaryShareSet(
      share: null
    ): TypedEventFilter<[BigNumber], { share: BigNumber }>;

    EntryFeeSet(fee: null): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    ExitFeeBeneficiaryShareSet(
      share: null
    ): TypedEventFilter<[BigNumber], { share: BigNumber }>;

    ExitFeeSet(fee: null): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    FeeBeneficiarySet(
      beneficiary: string | null
    ): TypedEventFilter<[string], { beneficiary: string }>;

    FeeCharged(
      amount: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    LockSet(
      lockBlock: null
    ): TypedEventFilter<[BigNumber], { lockBlock: BigNumber }>;

    PoolExited(
      who: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { who: string; amount: BigNumber }
    >;

    PoolJoined(
      who: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { who: string; amount: BigNumber }
    >;

    TokenAdded(
      _token: string | null
    ): TypedEventFilter<[string], { _token: string }>;

    TokenRemoved(
      _token: string | null
    ): TypedEventFilter<[string], { _token: string }>;
  };

  estimateGas: {
    HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    "HUNDRED_PERCENT()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ANNUAL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_ANNUAL_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ENTRY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_ENTRY_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_EXIT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_EXIT_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_TOKENS()"(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_AMOUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addToken(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "addToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balance(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balance(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOutStandingAnnualizedFee(overrides?: CallOverrides): Promise<BigNumber>;

    "calcOutStandingAnnualizedFee()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokensForAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcTokensForAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcTokensForAmountExit(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcTokensForAmountExit(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chargeOutstandingAnnualizedFee(overrides?: Overrides): Promise<BigNumber>;

    "chargeOutstandingAnnualizedFee()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitPool(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "exitPool(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAnnualizedFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getAnnualizedFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCap(overrides?: CallOverrides): Promise<BigNumber>;

    "getCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEntryFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getEntryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEntryFeeBeneficiaryShare(overrides?: CallOverrides): Promise<BigNumber>;

    "getEntryFeeBeneficiaryShare()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExitFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getExitFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getExitFeeBeneficiaryShare(overrides?: CallOverrides): Promise<BigNumber>;

    "getExitFeeBeneficiaryShare()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeBeneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    "getFeeBeneficiary()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLock(overrides?: CallOverrides): Promise<BigNumber>;

    "getLock()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLockBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "getLockBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenInPool(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenInPool(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    joinPool(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "joinPool(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeToken(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "removeToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAnnualizedFee(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAnnualizedFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCap(_maxCap: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setCap(uint256)"(
      _maxCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEntryFee(_fee: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setEntryFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEntryFeeBeneficiaryShare(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEntryFeeBeneficiaryShare(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setExitFee(_fee: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setExitFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setExitFeeBeneficiaryShare(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setExitFeeBeneficiaryShare(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeBeneficiary(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeeBeneficiary(address)"(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLock(_lock: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setLock(uint256)"(
      _lock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    HUNDRED_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "HUNDRED_PERCENT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_ANNUAL_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_ANNUAL_FEE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_ENTRY_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_ENTRY_FEE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_EXIT_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_EXIT_FEE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_TOKENS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MIN_AMOUNT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToken(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balance(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcOutStandingAnnualizedFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcOutStandingAnnualizedFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcTokensForAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcTokensForAmount(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcTokensForAmountExit(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcTokensForAmountExit(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chargeOutstandingAnnualizedFee(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "chargeOutstandingAnnualizedFee()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exitPool(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exitPool(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAnnualizedFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAnnualizedFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEntryFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntryFeeBeneficiaryShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEntryFeeBeneficiaryShare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExitFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getExitFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExitFeeBeneficiaryShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExitFeeBeneficiaryShare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeBeneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFeeBeneficiary()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLockBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLockBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenInPool(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenInPool(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTokens()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joinPool(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "joinPool(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeToken(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAnnualizedFee(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAnnualizedFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCap(
      _maxCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCap(uint256)"(
      _maxCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEntryFee(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEntryFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEntryFeeBeneficiaryShare(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEntryFeeBeneficiaryShare(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setExitFee(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setExitFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setExitFeeBeneficiaryShare(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setExitFeeBeneficiaryShare(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeBeneficiary(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeBeneficiary(address)"(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLock(
      _lock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLock(uint256)"(
      _lock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
