/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CallFacetInterface extends ethers.utils.Interface {
  functions: {
    "MAX_CALLERS()": FunctionFragment;
    "addCaller(address)": FunctionFragment;
    "call(address[],bytes[],uint256[])": FunctionFragment;
    "callNoValue(address[],bytes[])": FunctionFragment;
    "canCall(address)": FunctionFragment;
    "getCallers()": FunctionFragment;
    "removeCaller(address)": FunctionFragment;
    "singleCall(address,bytes,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_CALLERS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addCaller", values: [string]): string;
  encodeFunctionData(
    functionFragment: "call",
    values: [string[], BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "callNoValue",
    values: [string[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "canCall", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getCallers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCaller",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "singleCall",
    values: [string, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_CALLERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addCaller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callNoValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCallers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "singleCall", data: BytesLike): Result;

  events: {
    "Call(address,address,bytes,uint256)": EventFragment;
    "CallerAdded(address)": EventFragment;
    "CallerRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Call"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallerRemoved"): EventFragment;
}

export class CallFacet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: CallFacetInterface;

  functions: {
    MAX_CALLERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_CALLERS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addCaller(
      _caller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addCaller(address)"(
      _caller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    call(
      _targets: string[],
      _calldata: BytesLike[],
      _values: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "call(address[],bytes[],uint256[])"(
      _targets: string[],
      _calldata: BytesLike[],
      _values: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    callNoValue(
      _targets: string[],
      _calldata: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "callNoValue(address[],bytes[])"(
      _targets: string[],
      _calldata: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canCall(_caller: string, overrides?: CallOverrides): Promise<[boolean]>;

    "canCall(address)"(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getCallers(overrides?: CallOverrides): Promise<[string[]]>;

    "getCallers()"(overrides?: CallOverrides): Promise<[string[]]>;

    removeCaller(
      _caller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeCaller(address)"(
      _caller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    singleCall(
      _target: string,
      _calldata: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "singleCall(address,bytes,uint256)"(
      _target: string,
      _calldata: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  MAX_CALLERS(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_CALLERS()"(overrides?: CallOverrides): Promise<BigNumber>;

  addCaller(
    _caller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addCaller(address)"(
    _caller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  call(
    _targets: string[],
    _calldata: BytesLike[],
    _values: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "call(address[],bytes[],uint256[])"(
    _targets: string[],
    _calldata: BytesLike[],
    _values: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callNoValue(
    _targets: string[],
    _calldata: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "callNoValue(address[],bytes[])"(
    _targets: string[],
    _calldata: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canCall(_caller: string, overrides?: CallOverrides): Promise<boolean>;

  "canCall(address)"(
    _caller: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getCallers(overrides?: CallOverrides): Promise<string[]>;

  "getCallers()"(overrides?: CallOverrides): Promise<string[]>;

  removeCaller(
    _caller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeCaller(address)"(
    _caller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  singleCall(
    _target: string,
    _calldata: BytesLike,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "singleCall(address,bytes,uint256)"(
    _target: string,
    _calldata: BytesLike,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_CALLERS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_CALLERS()"(overrides?: CallOverrides): Promise<BigNumber>;

    addCaller(_caller: string, overrides?: CallOverrides): Promise<void>;

    "addCaller(address)"(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    call(
      _targets: string[],
      _calldata: BytesLike[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "call(address[],bytes[],uint256[])"(
      _targets: string[],
      _calldata: BytesLike[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    callNoValue(
      _targets: string[],
      _calldata: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "callNoValue(address[],bytes[])"(
      _targets: string[],
      _calldata: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    canCall(_caller: string, overrides?: CallOverrides): Promise<boolean>;

    "canCall(address)"(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCallers(overrides?: CallOverrides): Promise<string[]>;

    "getCallers()"(overrides?: CallOverrides): Promise<string[]>;

    removeCaller(_caller: string, overrides?: CallOverrides): Promise<void>;

    "removeCaller(address)"(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    singleCall(
      _target: string,
      _calldata: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "singleCall(address,bytes,uint256)"(
      _target: string,
      _calldata: BytesLike,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Call(
      caller: string | null,
      target: string | null,
      data: null,
      value: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { caller: string; target: string; data: string; value: BigNumber }
    >;

    CallerAdded(
      caller: string | null
    ): TypedEventFilter<[string], { caller: string }>;

    CallerRemoved(
      caller: string | null
    ): TypedEventFilter<[string], { caller: string }>;
  };

  estimateGas: {
    MAX_CALLERS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_CALLERS()"(overrides?: CallOverrides): Promise<BigNumber>;

    addCaller(_caller: string, overrides?: Overrides): Promise<BigNumber>;

    "addCaller(address)"(
      _caller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    call(
      _targets: string[],
      _calldata: BytesLike[],
      _values: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "call(address[],bytes[],uint256[])"(
      _targets: string[],
      _calldata: BytesLike[],
      _values: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    callNoValue(
      _targets: string[],
      _calldata: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "callNoValue(address[],bytes[])"(
      _targets: string[],
      _calldata: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    canCall(_caller: string, overrides?: CallOverrides): Promise<BigNumber>;

    "canCall(address)"(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCallers(overrides?: CallOverrides): Promise<BigNumber>;

    "getCallers()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeCaller(_caller: string, overrides?: Overrides): Promise<BigNumber>;

    "removeCaller(address)"(
      _caller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    singleCall(
      _target: string,
      _calldata: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "singleCall(address,bytes,uint256)"(
      _target: string,
      _calldata: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_CALLERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_CALLERS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCaller(
      _caller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addCaller(address)"(
      _caller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    call(
      _targets: string[],
      _calldata: BytesLike[],
      _values: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "call(address[],bytes[],uint256[])"(
      _targets: string[],
      _calldata: BytesLike[],
      _values: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    callNoValue(
      _targets: string[],
      _calldata: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "callNoValue(address[],bytes[])"(
      _targets: string[],
      _calldata: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canCall(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canCall(address)"(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCallers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCallers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCaller(
      _caller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeCaller(address)"(
      _caller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    singleCall(
      _target: string,
      _calldata: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "singleCall(address,bytes,uint256)"(
      _target: string,
      _calldata: BytesLike,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
